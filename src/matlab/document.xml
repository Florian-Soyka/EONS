<?xml version="1.0" encoding="UTF-8" standalone="no" ?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[classdef EONS < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        EvaluationofNonSinusoidalMagneticFieldsUIFigure  matlab.ui.Figure
        RunBatchButton                  matlab.ui.control.Button
        PredefinedWaveformPanel         matlab.ui.container.Panel
        PhaseEditField                  matlab.ui.control.NumericEditField
        PhaseEditFieldLabel             matlab.ui.control.Label
        DurationmsEditField             matlab.ui.control.NumericEditField
        DurationmsEditFieldLabel        matlab.ui.control.Label
        AmplitudeVmEditField            matlab.ui.control.NumericEditField
        AmplitudeVmEditField_2Label     matlab.ui.control.Label
        FrequencyHzEditField            matlab.ui.control.NumericEditField
        FrequencyHzEditFieldLabel       matlab.ui.control.Label
        TypeButtonGroup                 matlab.ui.container.ButtonGroup
        PulseButton                     matlab.ui.control.ToggleButton
        SineButton                      matlab.ui.control.ToggleButton
        SolveroptionsGhentUButtonGroup  matlab.ui.container.ButtonGroup
        UpperlimitVmEditField           matlab.ui.control.NumericEditField
        UpperlimitVmEditFieldLabel      matlab.ui.control.Label
        LowerlimitVmEditField           matlab.ui.control.NumericEditField
        LowerlimitVmEditFieldLabel      matlab.ui.control.Label
        EappVmEditField                 matlab.ui.control.NumericEditField
        EappVmEditFieldLabel            matlab.ui.control.Label
        OrderofsolutionEditField        matlab.ui.control.NumericEditField
        OrderofsolutionEditFieldLabel   matlab.ui.control.Label
        SamplingperiodEditField         matlab.ui.control.NumericEditField
        SamplingperiodEditFieldLabel    matlab.ui.control.Label
        MaxstepusEditField              matlab.ui.control.NumericEditField
        MaxstepusEditFieldLabel         matlab.ui.control.Label
        Image4                          matlab.ui.control.Image
        Image3                          matlab.ui.control.Image
        Image2                          matlab.ui.control.Image
        UseWaveformButton               matlab.ui.control.Button
        ScreenshotButton                matlab.ui.control.Button
        CalculateGSENNButton            matlab.ui.control.Button
        SENNParametersButtonGroup       matlab.ui.container.ButtonGroup
        ReillysValuesButton             matlab.ui.control.Button
        LmmEditField                    matlab.ui.control.NumericEditField
        LmmEditFieldLabel               matlab.ui.control.Label
        DmmEditField                    matlab.ui.control.NumericEditField
        DmmEditFieldLabel               matlab.ui.control.Label
        MembraneGhentUButtonGroup       matlab.ui.container.ButtonGroup
        SRBButton                       matlab.ui.control.ToggleButton
        SEButton                        matlab.ui.control.ToggleButton
        CRRSSButton                     matlab.ui.control.ToggleButton
        FHButton                        matlab.ui.control.ToggleButton
        HHButton                        matlab.ui.control.ToggleButton
        Image                           matlab.ui.control.Image
        TMinRD_SENNEditField            matlab.ui.control.NumericEditField
        TMinElectricFieldLabel          matlab.ui.control.Label
        TMinWPMEditField                matlab.ui.control.NumericEditField
        TMinWeightedSignalLabel         matlab.ui.control.Label
        CalculateRSENNButton            matlab.ui.control.Button
        ResultsUITable                  matlab.ui.control.Table
        ShowFFTButton                   matlab.ui.control.Button
        CornerFrequencyinHzEditField    matlab.ui.control.NumericEditField
        CornerFrequencyinHzEditFieldLabel  matlab.ui.control.Label
        DerivativeTypeButtonGroup       matlab.ui.container.ButtonGroup
        LowPassFilterButton             matlab.ui.control.RadioButton
        DifferenceQuotientButton        matlab.ui.control.RadioButton
        ResetSignalButton               matlab.ui.control.Button
        TMaxEditField                   matlab.ui.control.NumericEditField
        TMaxEditFieldLabel              matlab.ui.control.Label
        TMinEditField                   matlab.ui.control.NumericEditField
        TMinEditFieldLabel              matlab.ui.control.Label
        HelpAboutButton                 matlab.ui.control.Button
        StatusLabel                     matlab.ui.control.Label
        LoadFileButton                  matlab.ui.control.Button
        WPMUIAxes                       matlab.ui.control.UIAxes
        DerivativeUIAxes                matlab.ui.control.UIAxes
        InputSignalUIAxes               matlab.ui.control.UIAxes
        ContextMenu                     matlab.ui.container.ContextMenu
        Menu                            matlab.ui.container.Menu
        Menu2                           matlab.ui.container.Menu
    end


    properties (Access = private)
        OriginalSignal % The signal that is loaded from the file
        FilteredSignal % The signal that is potentially altered and used for subsequent calculations
        Derivative % The derivative of the signal
        dt % The sampling time
        parameters % Parameters read from file at startup
        fileName % the absolute path and name of the loaded file
    end

    methods (Access = private)

        function UpdateDerivative(app)
            if ~(isempty(app.OriginalSignal)) %has a signal been loaded?
                %Update Derivative
                %Which derivative to apply?
                temp = app.FilteredSignal(:,1);
                if(app.DifferenceQuotientButton.Value)
                    temp = app.FilteredSignal(2:end,1);
                    dB = diff(app.FilteredSignal(:,2)) ./ app.dt;
                else
                    [numd,dend] = bilinear([1 0], [1/(app.CornerFrequencyinHzEditField.Value*2*pi) 1], 1 / app.dt);
                    dB = filter(numd, dend, app.FilteredSignal(:,2));
                end
                %Check if we have to cut the signal
                value = app.TMinRD_SENNEditField.Value;
                if (value > temp(1)) && (value < temp(end))
                    index = find(temp > value);
                    temp = temp(index:end);
                    dB = dB(index:end);
                end
                temp = [temp 0.42*dB]; %dB to E
                app.Derivative = temp;
                plot(app.DerivativeUIAxes, app.Derivative(:,1), app.Derivative(:,2),"Color",[0.8500, 0.3250, 0.0980]);
                amplitude = max(abs(app.Derivative(:,2)));
                legend(app.DerivativeUIAxes,['Derivative with Amplitude: ' num2str(amplitude,'%.4g') ' V/m']);
                axis(app.DerivativeUIAxes,'auto');
                ylim(app.DerivativeUIAxes,[-1.2*amplitude 1.2*amplitude])
            end
        end

        function UpdateWPM(app)
            if ~(isempty(app.OriginalSignal)) %has a signal been loaded?
                %Retrieve num, den values from parameter file
                %https://de.mathworks.com/help/signal/ref/bilinear.html
                num_lower = eval(app.parameters(2));
                den_lower = eval(app.parameters(3));
                num_upper = eval(app.parameters(4));
                den_upper = eval(app.parameters(5));

                %Lower Action Level
                %Calculate Filter Parameters and apply WPM
                %[numd,dend] = bilinear(0.5*[1/(0.0175*2*pi)*1/(300*2*pi) 1/(0.0175*2*pi)+1/(300*2*pi) 1], [1/(25*2*pi)*1/(3e3*2*pi) 1/(25*2*pi)+1/(3e3*2*pi)  1], 1/app.dt);
                [numd,dend] = bilinear(num_lower, den_lower, 1/app.dt);
                wpm_LAL = filter(numd, dend, app.FilteredSignal(:,2));
                %cut some part of the signal?
                %cutoff_start = ceil(length(wpm_LAL) * 0.01);
                %wpm_LAL = wpm_LAL(cutoff_start:end);

                %Upper Action Level
                %[numd,dend] = bilinear(0.5*[1/(0.21*2*pi) 1], [1/(3000*2*pi) 1], 1/app.dt);
                [numd,dend] = bilinear(num_upper, den_upper, 1/app.dt);
                wpm_UAL = filter(numd, dend, app.FilteredSignal(:,2));

                time = app.FilteredSignal(:,1);

                %Check if we have to cut the signal for the EI evaluation
                value = app.TMinWPMEditField.Value;
                if (value > time(1)) && (value < time(end))
                    index = find(time > value);
                    time = time(index:end);
                    wpm_LAL = wpm_LAL(index:end);
                    wpm_UAL = wpm_UAL(index:end);
                end

                %check if the EIs are different if we leave out the first 1% of the signal. If so, leave out the first 1%
                first_n_samples = ceil(0.01 * length(wpm_UAL));
                if (( max(abs(wpm_UAL)) > max(abs(wpm_UAL(first_n_samples:end)))))
                    time = time(first_n_samples:end);
                    wpm_UAL = wpm_UAL(first_n_samples:end);
                end

                %Plot just the Upper Action Level since the Lower is not relevant here
                handle = plot(app.WPMUIAxes, time, wpm_UAL,'Color',[0.4660, 0.6740, 0.1880]);
                hold(app.WPMUIAxes,'on')
                [~, index_UAL] = max(abs(wpm_UAL));
                plot(app.WPMUIAxes, time(index_UAL), wpm_UAL(index_UAL),'o','Color',[0.4660, 0.6740, 0.1880],'MarkerFaceColor',[0.4660, 0.6740, 0.1880]);
                hold(app.WPMUIAxes,'off')
                axis(app.WPMUIAxes,'auto');
                %Calculate EI
                EI_upper = ceil(max(abs(wpm_UAL))*100);
                legend(handle, ['Weighted Signal with EI: ' num2str(EI_upper) ' %']);
                %put EI in results table
                app.ResultsUITable.Data{1,1} = [num2str(EI_upper) ' %'];
            end
        end

        function ShowFFT(app)
            if ~(isempty(app.OriginalSignal)) %has a signal been loaded?
                %taken from MATLAB FFT doc
                Y = fft(app.FilteredSignal(:,2));
                L = length(app.FilteredSignal(:,2));
                P2 = abs(Y/L);
                P1 = P2(1:floor(L/2)+1);
                P1(2:end-1) = 2*P1(2:end-1);
                f = 1/app.dt*(0:(floor(L/2)))/L;
                figure;
                ax = gca;
                plot(ax, f,P1)
                title(ax,'Single-Sided Amplitude Spectrum of the Magnetic Field')
                xlabel(ax,'f (Hz)')
                ylabel(ax,'|A(f)|')
            end
        end

        function results = CalculateActionLevels(app, frequency)
            %use TF parameters from file, otherwise EMFV
            if(app.parameters(6) == 'true')
                num_lower = eval(app.parameters(2));
                den_lower = eval(app.parameters(3));
                num_upper = eval(app.parameters(4));
                den_upper = eval(app.parameters(5));
                s = 1i*frequency*2*pi;
                %Lower Action Level
                s_num = [];
                for k=0:length(num_lower)-1
                    s_num = [s^k s_num];
                end
                s_den = [];
                for k=0:length(den_lower)-1
                    s_den = [s^k s_den];
                end
                LAL = abs(1/((s_num * num_lower') / (s_den * den_lower')));

                %Upper Action Level
                s_num = [];
                for k=0:length(num_upper)-1
                    s_num = [s^k s_num];
                end
                s_den = [];
                for k=0:length(den_upper)-1
                    s_den = [s^k s_den];
                end
                UAL = abs(1/((s_num * num_upper') / (s_den * den_upper')));

                results = [LAL, UAL];
            else
                %calculate EMFV action levels in Tesla for the given frequency
                %Upper Action Level
                UAL = 2000; %in mT
                if (frequency > 0.21 )
                    if (frequency < 3000)
                        UAL = 420 / frequency;
                    else
                        UAL = 0.14;
                    end
                end

                %Lower Action Level
                LAL = 2000; %in mT
                if (frequency > 0.0175 )
                    if (frequency < 25)
                        LAL = 35 / frequency;
                    else
                        if (frequency < 300)
                            LAL = 1.4;
                        else
                            if (frequency < 3000)
                                LAL = 420 / frequency;
                            else
                                LAL = 0.14;
                            end
                        end
                    end
                end

                results = [LAL/1000, UAL/1000];
            end
        end

        function RunSENN_Reilly(app)
            original_directory = pwd;
            %read location of SENN.exe from parameter file
            %SENN_directory = 'C:\Users\Soyka.Florian\Downloads\SENN PC Installation folder\SENN_PC_3-20-11';
            SENN_directory = app.parameters(1);
            if ~(isfolder(SENN_directory))
                uialert(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure,'The SENN folder specified in the parameter file is invalid.','Error');
                return;
            end
            cd(SENN_directory);

            %prepare input
            E = app.Derivative(:,2); %worst-case induction factor = 0.42 V/m / T/s
            time = app.Derivative(:,1);
            amplitude = max(abs(E));

            %prepare input file (XYfile.txt)
            %SENN only allows for an input length of 8000 samples
            duration = time(end)-time(1);
            dt_senn = duration / 8000;
            index_step = ceil(dt_senn / app.dt);
            %normalize to 1 and time in ms
            save_matrix = [time(1:index_step:end)*1000 E(1:index_step:end) ./ max(abs(E(1:index_step:end)))];
            writematrix(save_matrix,'XYfile.txt','Delimiter','tab');

            %prepare SENN parameter file (inparam.txt), adjust XPD, FINAL and NTRP
            %set NTRP such that dt_senn becomes < 0.005 ms, warn if NTRP > 13
            NTRP = num2str(ceil(index_step*app.dt*1000 / 0.005));
            %duration in ms string, should be > 2 ms and < 0.5 s
            dur_string = num2str(floor(duration * 1000));
            if (str2double(NTRP)>13 || duration>0.5 || duration<0.002)
                uialert(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure,'Signal duration should be between 2 and 500 ms.','Warning','Icon','warning');
            end
            
            %number of consecutive nodes that have to be over VTH in order to have an action potential
            num_nodes = 3;
            
            inparam_str = [' MONOPHASIC' newline ' &FIBER' newline ' NNODES=51,' newline ' NLIN1=1,' newline ' NLIN2=51,' newline ' NODE1=22,' newline ' DIAM=0.0020,' newline ' GAP=0.00025,' newline ' CM=2.0,' newline ' GM=30.365,' newline ' RHOI=110.0,' newline ' RHOE=300.0,' newline ' &END' newline];
            inparam_str = [inparam_str ' &STIMULUS' newline ' XC=0.0,' newline ' YC=1.0,' newline ' XA=100.0,' newline ' YA=100.0,' newline ' WIREL=0.85,' newline ' IWAVE=13,' newline ' UIO=1,' newline ' XPD=' dur_string ',' newline ' UIO2=0.0,' newline ' XPD2=0.0,' newline ' DELAY=0.0,' newline ' FREQ=50,' newline];
            inparam_str = [inparam_str ' PHASE=0.0,' newline ' FREQ2=0.0,' newline ' PHASE2=0.0,' newline ' AMP2=0.0,' newline ' NSINES=10,' newline ' DCOFF=0.0,' newline ' TAUS=0.0,' newline ' VREF=0.0,' newline ' NP=1,' newline ' FS=1,' newline ' S=1,' newline ' NTRP=' NTRP ',' newline ' &END' newline];
            inparam_str = [inparam_str ' &CONTROL' newline ' ITHR=1,' newline ' VTH=80.0,' newline ' NTHNODE=' num2str(num_nodes) ',' newline ' DELT=0.0002,' newline ' DELT2M=4.0,' newline ' FINAL=' dur_string ',' newline ' IPRNT=50,' newline ' &END'];
            writematrix(inparam_str,'inparam.txt','QuoteStrings',0)

            %run SENN
            if ~(isfile('SENN.exe'))
                uialert(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure,'The SENN executable cannot be found.','Error');
                return;
            end
            app.StatusLabel.Text = ['SENN (Reilly) Running - Please wait and close the SENN.exe window once the run is finished (without saving the changes).'];
            drawnow;
            system('SENN.exe');
            app.StatusLabel.Text = ['SENN (Reilly) Finished'];
            drawnow;

            %while SENN is runnig this program is waiting. The user has to terminate SENN
            if ~(isfile('data.out'))
                uialert(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure,'The data.out file cannot be found.','Error');
                return;
            end
            fid = fopen('data.out','r');
            data_text = fscanf(fid,'%s');
            fclose(fid);
            %first search for 'ENDOFRUN'
            indices = strfind(data_text,'ENDOFRUN');
            if (isempty(indices))
                app.ResultsUITable.Data{2,1} = 'An error occured running SENN (Reilly)';
                app.ResultsUITable.Data{2,2} = '-';
                cd(original_directory);
                return;
            end

            %find the last iteration in which #NODES >= num_nodes
            indices = strfind(data_text,'#NODES');
            if (isempty(indices))
                app.ResultsUITable.Data{2,1} = 'An error occured running SENN (Reilly)';
                app.ResultsUITable.Data{2,2} = '-';
                cd(original_directory);
                return;
            end
            
            for ii=length(indices):-1:1
                index_start = indices(ii) + 6;
                index_end = indices(ii) + strfind(data_text(indices(ii):indices(ii)+20),'TMAX') -2;
                nodes = str2double(data_text(index_start:index_end));
                if (nodes >= num_nodes)
                    break;
                end
            end            
            
            index = indices(ii); %this is the index poiniting to #NODES
            %extract UIO, TMAX and NODE
            %go back to find UIO
            index_UIO = strfind(data_text(index-20:index),'UIO')-20+2+index; %+2 from UIO
            index_TMAX = strfind(data_text(index:index+20),'TMAX')+3+index; %+3 from TMAX            
            index_NODE = strfind(data_text(index+6:index+30),'NODE')+6+3+index; %+6 from #NODES, +3 from NODE
            %can be followed by CMB or by ITER if it is the last index
            index_NODE_END = strfind(data_text(index_NODE:index_NODE+10),'CMB')+index_NODE;
            if (isempty(index_NODE_END))
                index_NODE_END = strfind(data_text(index_NODE:index_NODE+10),'IT')+index_NODE;
            end

            UIO = str2double(data_text(index_UIO:index-1));                        
            TMAX = str2double(data_text(index_TMAX:index_NODE-5)); %only two digits precision
            NODE = str2double(data_text(index_NODE:index_NODE_END-2));                        
            
            %*30 for conversion from mA/cm^2 to V/m and /5.6 due to the safety factor
            threshold = 30* UIO / 5.6;

            %display results in table
            EI_upper = ceil(amplitude/threshold*100);
            app.ResultsUITable.Data{2,1} = [num2str(EI_upper) ' %'];
            app.ResultsUITable.Data{2,2} = [num2str(threshold,'%.4g')];
            app.ResultsUITable.Data{2,3} = [num2str(TMAX,'%.4g')];
            app.ResultsUITable.Data{2,4} = [num2str(NODE,'%.2g')];
            cd(original_directory);
        end

        function RunSENN_GhentU(app)
            modelNames = {'HH','FH','CRRSS','SE','SRB'};
            %prepare input
            E = app.Derivative(:,2); %worst-case induction factor = 0.42 V/m / T/s
            time = app.Derivative(:,1);
            amplitude = max(abs(E));
            duration = time(end)-time(1);

            % Customizable pars
            % 1. Neuron parameters
            Diamet = app.DmmEditField.Value; % mm
            Ltot = app.LmmEditField.Value; % mm
            model = find([app.HHButton.Value,app.FHButton.Value,app.CRRSSButton.Value,app.SEButton.Value,app.SRBButton.Value]);
            % 2. Solver options
            OrderOfSolution = app.OrderofsolutionEditField.Value;
            SamplingPeriod = app.SamplingperiodEditField.Value;
            SolverMaxStep = app.MaxstepusEditField.Value;

            % Applied external field (set to zero to perform titration sweep)
            Eapp = 5.6*1000*(app.EappVmEditField.Value);   % mV/m applied E-field 
            % The EappVmEditField contains the E-field (V/m) with safety factor 5.6 
            SweepActI = ~Eapp; Ibegin = 5.6*1000*(app.LowerlimitVmEditField.Value); Iend = 5.6*1000*(app.UpperlimitVmEditField.Value);
            SearchMode = (Ibegin||Iend);

            % Fixed pars
            conf = 0; Tp = duration; x = 0; y = 0; z = 0; 
            ancat = 1; monbi = 1;

            app.StatusLabel.Text = ['SENN (' modelNames{model} ',L=' num2str(Ltot) ',D=' num2str(Diamet) ') Running - Please wait'];
            drawnow;
            % run SENN
            SENNfiberCP(num2str(Diamet),num2str(Ltot),num2str(x),num2str(y),num2str(z),num2str(Tp),...
                num2str(ancat),num2str(monbi),num2str(Ibegin),num2str(Iend),num2str(SearchMode),...
                num2str(SweepActI),num2str(Eapp),num2str(model),num2str(conf),...
                'nofilename',num2str(0),app.Derivative,num2str(SolverMaxStep),num2str(OrderOfSolution),num2str(SamplingPeriod));
            app.StatusLabel.Text = ['SENN (' modelNames{model} ',L=' num2str(Ltot) ',D=' num2str(Diamet) ') Finished'];
            drawnow;
            
            if SweepActI
            %/5.6 due to the safety factor   /1000 for mV/m -> V/m
            loadName = ['SweepSENNSR-' num2str(x) '-' num2str(y) '-' num2str(z) '-' ...
                num2str(Tp,5) '-' num2str(ancat) '-' num2str(monbi) '(' modelNames{model} '-Conf' num2str(conf) ').mat'];
            Threshold = load(loadName);
            threshold =  0.001*Threshold.SweepAct/5.6;
            delete(loadName)

            %display results in table
            EI_upper = ceil(amplitude/threshold*100);
            app.ResultsUITable.Data{3,1} = [num2str(EI_upper) ' %'];
            app.ResultsUITable.Data{3,2} = [num2str(threshold,'%.4g')];
            end
        end
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            %init results table
            app.ResultsUITable.ColumnName = {'Exposure Index', 'Threshold (V/m)', 'AP Time (ms)', 'AP Node'};
            app.ResultsUITable.RowName = {'WPM', 'SENN (Reilly)', 'SENN (Ghent U.)'};
            app.ResultsUITable.Data = {'-','-','-','-';'-','-','-','-';'-','-','-','-'};
            %https://de.mathworks.com/help/matlab/ref/matlab.ui.control.tableappd.addstyle.html
            s = uistyle('HorizontalAlignment','center');
            addStyle(app.ResultsUITable,s);

            if isfile('EONS_parameters.txt')
                %read in parameter file
                app.parameters = readmatrix('EONS_parameters.txt','OutputType','string','NumHeaderLines',0,'Delimiter','');
            else
                uialert(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure,'Parameters file could not be read. Please provide EONS_parameters.txt and restart.','Error');
            end

            drawnow;
            app.EvaluationofNonSinusoidalMagneticFieldsUIFigure.WindowState = 'maximized';

            screenSize = get(groot,'ScreenSize');
            screenWidth = screenSize(3);
            screenHeight = screenSize(4);
            left = screenWidth*0.1;
            bottom = screenHeight*0.1;
            width = screenWidth*0.8;
            height = screenHeight*0.8;
            drawnow;
            app.EvaluationofNonSinusoidalMagneticFieldsUIFigure.Position = [left bottom width height];
        end

        % Button pushed function: LoadFileButton
        function LoadFileButtonPushed(app, event)
            %specify file type: 1. column time in seconds, 2. column magnetic field in T
            [file, path] = uigetfile('*.txt');
            if ~isequal(file,0)
                file_data = readmatrix(fullfile(path,file));
                app.fileName = fullfile(path,file);
                delta_t = diff(file_data(:,1));
                if max(delta_t - mean(delta_t)) > 1e-6
                    uialert(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure,'Time spacing needs to be constant','Error');
                    return;
                end
                app.dt = mean(delta_t);
                app.StatusLabel.Text = ['File ' file ' loaded. The sampling time is ' num2str(app.dt,'%g') ' s.'];
                file_length = length(file_data(:,1));
                app.OriginalSignal = zeros(file_length,2);
                app.OriginalSignal(:,1) = file_data(:,1);
                app.OriginalSignal(:,2) = file_data(:,2);
                app.FilteredSignal = app.OriginalSignal;

                %plot
                plot(app.InputSignalUIAxes, app.FilteredSignal(:,1), app.FilteredSignal(:,2));
                axis(app.InputSignalUIAxes,'auto');
                legend(app.InputSignalUIAxes, 'Input Signal')
                app.TMinEditField.Value = min(app.FilteredSignal(:,1));
                app.TMinWPMEditField.Value = min(app.FilteredSignal(:,1));
                app.TMinRD_SENNEditField.Value = min(app.FilteredSignal(:,1));
                app.TMaxEditField.Value = max(app.FilteredSignal(:,1));
                app.ResultsUITable.Data = {'-','-','-','-';'-','-','-','-';'-','-','-','-'};
                UpdateDerivative(app);
                UpdateWPM(app);
            end
            %Get focus to main window back
            drawnow;
            figure(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure)
            app.WPMUIAxes.Toolbar.Visible = 'on';
            app.DerivativeUIAxes.Toolbar.Visible = 'on';
            app.InputSignalUIAxes.Toolbar.Visible = 'on';
        end

        % Button pushed function: HelpAboutButton
        function HelpAboutButtonPushed(app, event)
            uialert(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure,{'See Manual.pdf for help.';'For inquiries contact florian.soyka@dguv.de'},'Help / About','Icon','');
        end

        % Button pushed function: ResetSignalButton
        function ResetSignalButtonPushed(app, event)
            if ~(isempty(app.OriginalSignal)) %has a signal been loaded?
                app.FilteredSignal = app.OriginalSignal;
                plot(app.InputSignalUIAxes, app.FilteredSignal(:,1), app.FilteredSignal(:,2));
                app.TMinEditField.Value = min(app.FilteredSignal(:,1));
                app.TMinWPMEditField.Value = min(app.FilteredSignal(:,1));
                app.TMinRD_SENNEditField.Value = min(app.FilteredSignal(:,1));
                app.TMaxEditField.Value = max(app.FilteredSignal(:,1));
                axis(app.InputSignalUIAxes,'auto');
                UpdateDerivative(app);
                UpdateWPM(app);
            end
        end

        % Value changed function: TMinEditField
        function TMinEditFieldValueChanged(app, event)
            value = app.TMinEditField.Value;
            %cut the filtered signal appropriately and redraw
            if ~(isempty(app.OriginalSignal)) %has a signal been loaded?
                if(value >= app.FilteredSignal(end,1))
                    return;
                end
                index = find(app.FilteredSignal(:,1) > value);
                temp = app.FilteredSignal(index:end,1);
                temp = [temp app.FilteredSignal(index:end,2)];
                app.FilteredSignal = temp;
                plot(app.InputSignalUIAxes, app.FilteredSignal(:,1), app.FilteredSignal(:,2));
                axis(app.InputSignalUIAxes,'auto');
                UpdateDerivative(app);
                UpdateWPM(app);
            end
        end

        % Value changed function: TMaxEditField
        function TMaxEditFieldValueChanged(app, event)
            value = app.TMaxEditField.Value;
            %cut the filtered signal appropriately and redraw
            if ~(isempty(app.OriginalSignal)) %has a signal been loaded?
                if(value <= app.FilteredSignal(1,1))
                    return;
                end
                index = find(app.FilteredSignal(:,1) < value,1,'last');
                temp = app.FilteredSignal(1:index,1);
                temp = [temp app.FilteredSignal(1:index,2)];
                app.FilteredSignal = temp;
                plot(app.InputSignalUIAxes, app.FilteredSignal(:,1), app.FilteredSignal(:,2));
                axis(app.InputSignalUIAxes,'auto');
                UpdateDerivative(app);
                UpdateWPM(app);
            end
        end

        % Selection changed function: DerivativeTypeButtonGroup
        function DerivativeTypeButtonGroupSelectionChanged(app, event)
            %selectedButton = app.DerivativeTypeButtonGroup.SelectedObject;
            UpdateDerivative(app);
        end

        % Value changed function: CornerFrequencyinHzEditField
        function CornerFrequencyinHzEditFieldValueChanged(app, event)
            %value = app.CornerFrequencyinHzEditField.Value;
            app.LowPassFilterButton.Value = 1;
            UpdateDerivative(app);
        end

        % Button pushed function: ShowFFTButton
        function ShowFFTButtonPushed(app, event)
            ShowFFT(app);
        end

        % Button pushed function: CalculateRSENNButton
        function CalculateRSENNButtonButtonPushed(app, event)
            if ~(isempty(app.OriginalSignal))
                RunSENN_Reilly(app);
            end
        end

        % Value changed function: TMinWPMEditField
        function TMinWPMEditFieldValueChanged(app, event)
            if ~(isempty(app.OriginalSignal)) %has a signal been loaded?
                UpdateWPM(app);
            end
        end

        % Value changed function: TMinRD_SENNEditField
        function TMinRD_SENNEditFieldValueChanged(app, event)
            if ~(isempty(app.OriginalSignal)) %has a signal been loaded?
                UpdateDerivative(app);
            end
        end

        % Button pushed function: CalculateGSENNButton
        function CalculateGSENNButtonPushed(app, event)
            if ~(isempty(app.OriginalSignal))
                RunSENN_GhentU(app);
            end
        end

        % Button pushed function: ScreenshotButton
        function ScreenshotButtonPushed(app, event)
            filter = {'*.jpg';'*.png';'*.tif';'*.pdf'};
            [filename,filepath] = uiputfile(filter);
            if ischar(filename)
                exportapp(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure,[filepath filename]);
            end
            %Get focus to main window back
            drawnow;
            figure(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure)
        end

        % Button pushed function: ReillysValuesButton
        function ReillysValuesButtonPushed(app, event)
            app.DmmEditField.Value = 0.02;
            app.LmmEditField.Value = 100;
            app.FHButton.Value = 1;
        end

        % Button pushed function: UseWaveformButton
        function UseWaveformButtonPushed(app, event)
            frequency = app.FrequencyHzEditField.Value;

            % make dt frequency dependent, and have a least 50 us.
            dt = min([1/frequency / 100,  0.05e-3]);

            %convert from ms to s
            duration = app.DurationmsEditField.Value / 1000;

            %Amplitude for the E field
            amplitude = app.AmplitudeVmEditField.Value;
            
            %Phase for the E field
            phase = app.PhaseEditField.Value;

            %calculate time vector
            time = [0:dt:duration]';

            %do we need a sine or a pulse for the E-field?
            if (app.PulseButton.Value == 1)
                %pulse
                waveform = zeros(length(time),1);
                index = find(time > (1/(2*frequency)),1) - 1;
                if(isempty(index))
                    index = length(time);
                end
                %caculate the start index based on the phase settings
                startindex = find(time >= phase/360 * duration,1);
                
                if(~isempty(startindex)) %otherwise we're done
                    endindex = startindex + index -1;
                    if( endindex > length(time))
                        endindex = length(time);
                    end
                    waveform(startindex:endindex) = ones(endindex-startindex+1,1);
                    waveform = waveform .* amplitude;                   
                end
            else
                %sine
                waveform = amplitude .* sin(2*pi*frequency*time + phase/360*2*pi);
            end


            %integrate the signal and multiply with induction factor
            int_signal = cumtrapz(time, waveform) ./ 0.42;

            app.dt = dt;
            app.StatusLabel.Text = ['Using a predfined waveform.'];
            file_length = length(time);
            app.OriginalSignal = zeros(file_length,2);
            app.OriginalSignal(:,1) = time;
            app.OriginalSignal(:,2) = int_signal;
            app.FilteredSignal = app.OriginalSignal;

            %plot
            plot(app.InputSignalUIAxes, app.FilteredSignal(:,1), app.FilteredSignal(:,2));
            axis(app.InputSignalUIAxes,'auto');
            legend(app.InputSignalUIAxes, 'Input Signal')
            app.TMinEditField.Value = min(app.FilteredSignal(:,1));
            app.TMinWPMEditField.Value = min(app.FilteredSignal(:,1));
            app.TMinRD_SENNEditField.Value = min(app.FilteredSignal(:,1));
            app.TMaxEditField.Value = max(app.FilteredSignal(:,1));
            app.ResultsUITable.Data = {'-','-','-','-';'-','-','-','-';'-','-','-','-'};
            UpdateDerivative(app);
            UpdateWPM(app);
            %Get focus to main window back
            drawnow;
            figure(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure)
        end

        % Value changed function: FrequencyHzEditField
        function FrequencyHzEditFieldValueChanged(app, event)
            app.UseWaveformButtonPushed();
        end

        % Value changed function: AmplitudeVmEditField
        function AmplitudeVmEditFieldValueChanged(app, event)
            app.UseWaveformButtonPushed();            
        end

        % Value changed function: DurationmsEditField
        function DurationmsEditFieldValueChanged(app, event)
            app.UseWaveformButtonPushed();            
        end

        % Button pushed function: RunBatchButton
        function RunBatchButtonPushed(app, event)
            %run a batch process for Ghent U. simulations - R-SENN needs user input so it cannot be batch processed properly
            %start by defining a batch vector here. Later this can be read from a file
            %set parameters, run G-SENN, save intermediate results, iterate
            
            %parameters: model (1-5, HH - SRB), D (mm), L (mm), max_step
            %(us), order of solution, type (1=sine, 2=pulse), frequency
            %(Hz), duration (ms), lower limit (V/m), upper limit (V/m)
            %use test batch vector:
            %batch = [1 0.02 20.5 25 1 1 200 50; 2 0.02 20.5 25 1 1 500 50 0 0;];
            
            %read batch vector from file
            [file, path] = uigetfile('*.txt');
            if ~isequal(file,0)
                file_data = readmatrix(fullfile(path,file));
                %check file formatting for consistency and stop in case of error
                if size(file_data,2) ~= 10
                    uialert(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure,'Batch file seems to have wrong formatting. It needs 10 columns.','Error');
                    return;
                end
                batch = file_data;
            else
                return;
            end
            
            %initialize empty results vector
            results = [];
            filename = ['results ' datestr(now,'dd.mm.yyyy HH_MM_SS') '.mat'];
            %iterate batch vector
            for ii = 1:size(batch,1)
                %append current conditions and mark result as invalid (-1) so far               
                results = [results; batch(ii,:) -1];
                %save intermediate results
                save(filename, "results");
                %set model
                app.HHButton.Value = 0;
                app.FHButton.Value = 0;
                app.CRRSSButton.Value = 0;
                app.SEButton.Value = 0;
                app.SRBButton.Value = 0;
                switch batch(ii,1)
                    case 1
                        app.HHButton.Value = 1;
                    case 2
                        app.FHButton.Value = 1;
                    case 3
                        app.CRRSSButton.Value = 1;
                    case 4
                        app.SEButton.Value = 1;
                    case 5
                        app.SRBButton.Value = 1;
                    otherwise
                        %choose FH and continue to next loop iteration
                        app.FHButton.Value = 1;
                        continue;
                end
                %set D & L
                app.DmmEditField.Value = batch(ii,2);
                app.LmmEditField.Value = batch(ii,3);
                %set max_step and order of solution
                app.MaxstepusEditField.Value = batch(ii,4);
                app.OrderofsolutionEditField.Value = batch(ii,5);
                %set waveform type
                switch batch(ii,6)
                    case 1
                        app.PulseButton.Value = 0;
                        app.SineButton.Value = 1;
                    case 2
                        app.PulseButton.Value = 1;
                        app.SineButton.Value = 0;
                    otherwise
                        %choose sine and continue to next loop iteration
                        app.PulseButton.Value = 0;
                        app.SineButton.Value = 1;
                        continue;
                end
                %set frequency and duration
                app.FrequencyHzEditField.Value = batch(ii,7);
                app.DurationmsEditField.Value = batch(ii,8);
                %set lower / upper limit
                app.LowerlimitVmEditField.Value = batch(ii,9);
                app.UpperlimitVmEditField.Value = batch(ii,10);
                %"push" UseWaveformButton
                app.UseWaveformButtonPushed();
                %run G-SENN
                app.RunSENN_GhentU(); 
                %put results in vector
                results(end) = str2double(app.ResultsUITable.Data{3,2});
            end
            %save final results
            save(filename, "results");
        end

        % Value changed function: PhaseEditField
        function PhaseEditFieldValueChanged(app, event)
            app.UseWaveformButtonPushed();             
        end

        % Selection changed function: TypeButtonGroup
        function TypeButtonGroupSelectionChanged(app, event)
            app.UseWaveformButtonPushed();  
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create EvaluationofNonSinusoidalMagneticFieldsUIFigure and hide until all components are created
            app.EvaluationofNonSinusoidalMagneticFieldsUIFigure = uifigure('Visible', 'off');
            app.EvaluationofNonSinusoidalMagneticFieldsUIFigure.Position = [50 50 1600 1000];
            app.EvaluationofNonSinusoidalMagneticFieldsUIFigure.Name = 'Evaluation of Non-Sinusoidal Magnetic Fields';
            app.EvaluationofNonSinusoidalMagneticFieldsUIFigure.Scrollable = 'on';

            % Create InputSignalUIAxes
            app.InputSignalUIAxes = uiaxes(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            title(app.InputSignalUIAxes, 'Magnetic Flux Density')
            xlabel(app.InputSignalUIAxes, 'Time / s')
            ylabel(app.InputSignalUIAxes, 'Magnetic Flux Density / T')
            app.InputSignalUIAxes.XGrid = 'on';
            app.InputSignalUIAxes.YGrid = 'on';
            app.InputSignalUIAxes.Box = 'on';
            app.InputSignalUIAxes.Position = [46 630 635 324];

            % Create DerivativeUIAxes
            app.DerivativeUIAxes = uiaxes(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            title(app.DerivativeUIAxes, 'Induced Electrical Field')
            xlabel(app.DerivativeUIAxes, 'Time / s')
            ylabel(app.DerivativeUIAxes, 'Electric Field / V/m')
            app.DerivativeUIAxes.XGrid = 'on';
            app.DerivativeUIAxes.YGrid = 'on';
            app.DerivativeUIAxes.Box = 'on';
            app.DerivativeUIAxes.Position = [844 631 676 324];

            % Create WPMUIAxes
            app.WPMUIAxes = uiaxes(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            title(app.WPMUIAxes, 'Weighted Peak Method')
            xlabel(app.WPMUIAxes, 'Time / s')
            ylabel(app.WPMUIAxes, 'Weighted Signal')
            app.WPMUIAxes.XGrid = 'on';
            app.WPMUIAxes.YGrid = 'on';
            app.WPMUIAxes.Box = 'on';
            app.WPMUIAxes.Position = [47 205 635 311];

            % Create LoadFileButton
            app.LoadFileButton = uibutton(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'push');
            app.LoadFileButton.ButtonPushedFcn = createCallbackFcn(app, @LoadFileButtonPushed, true);
            app.LoadFileButton.Position = [881 263 100 22];
            app.LoadFileButton.Text = 'Load File';

            % Create StatusLabel
            app.StatusLabel = uilabel(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.StatusLabel.Position = [882 299 562 22];
            app.StatusLabel.Text = 'Status:';

            % Create HelpAboutButton
            app.HelpAboutButton = uibutton(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'push');
            app.HelpAboutButton.ButtonPushedFcn = createCallbackFcn(app, @HelpAboutButtonPushed, true);
            app.HelpAboutButton.Position = [1481 263 100 22];
            app.HelpAboutButton.Text = 'Help / About';

            % Create TMinEditFieldLabel
            app.TMinEditFieldLabel = uilabel(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.TMinEditFieldLabel.HorizontalAlignment = 'right';
            app.TMinEditFieldLabel.Position = [65 573 39 22];
            app.TMinEditFieldLabel.Text = 'T Min:';

            % Create TMinEditField
            app.TMinEditField = uieditfield(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'numeric');
            app.TMinEditField.ValueChangedFcn = createCallbackFcn(app, @TMinEditFieldValueChanged, true);
            app.TMinEditField.Position = [123 573 65 22];

            % Create TMaxEditFieldLabel
            app.TMaxEditFieldLabel = uilabel(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.TMaxEditFieldLabel.HorizontalAlignment = 'right';
            app.TMaxEditFieldLabel.Position = [204 573 42 22];
            app.TMaxEditFieldLabel.Text = 'T Max:';

            % Create TMaxEditField
            app.TMaxEditField = uieditfield(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'numeric');
            app.TMaxEditField.ValueChangedFcn = createCallbackFcn(app, @TMaxEditFieldValueChanged, true);
            app.TMaxEditField.Position = [261 573 65 22];

            % Create ResetSignalButton
            app.ResetSignalButton = uibutton(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'push');
            app.ResetSignalButton.ButtonPushedFcn = createCallbackFcn(app, @ResetSignalButtonPushed, true);
            app.ResetSignalButton.Position = [350 573 100 22];
            app.ResetSignalButton.Text = 'Reset Signal';

            % Create DerivativeTypeButtonGroup
            app.DerivativeTypeButtonGroup = uibuttongroup(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.DerivativeTypeButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @DerivativeTypeButtonGroupSelectionChanged, true);
            app.DerivativeTypeButtonGroup.Title = 'Derivative Type';
            app.DerivativeTypeButtonGroup.Position = [930 529 142 69];

            % Create DifferenceQuotientButton
            app.DifferenceQuotientButton = uiradiobutton(app.DerivativeTypeButtonGroup);
            app.DifferenceQuotientButton.Text = 'Difference Quotient';
            app.DifferenceQuotientButton.Position = [11 23 125 22];
            app.DifferenceQuotientButton.Value = true;

            % Create LowPassFilterButton
            app.LowPassFilterButton = uiradiobutton(app.DerivativeTypeButtonGroup);
            app.LowPassFilterButton.Text = 'Low Pass Filter';
            app.LowPassFilterButton.Position = [11 1 104 22];

            % Create CornerFrequencyinHzEditFieldLabel
            app.CornerFrequencyinHzEditFieldLabel = uilabel(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.CornerFrequencyinHzEditFieldLabel.HorizontalAlignment = 'right';
            app.CornerFrequencyinHzEditFieldLabel.Position = [1092 531 136 22];
            app.CornerFrequencyinHzEditFieldLabel.Text = 'Corner Frequency in Hz:';

            % Create CornerFrequencyinHzEditField
            app.CornerFrequencyinHzEditField = uieditfield(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'numeric');
            app.CornerFrequencyinHzEditField.Limits = [0 Inf];
            app.CornerFrequencyinHzEditField.ValueChangedFcn = createCallbackFcn(app, @CornerFrequencyinHzEditFieldValueChanged, true);
            app.CornerFrequencyinHzEditField.Position = [1239 531 75 22];
            app.CornerFrequencyinHzEditField.Value = 10000;

            % Create ShowFFTButton
            app.ShowFFTButton = uibutton(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'push');
            app.ShowFFTButton.ButtonPushedFcn = createCallbackFcn(app, @ShowFFTButtonPushed, true);
            app.ShowFFTButton.Position = [468 573 100 22];
            app.ShowFFTButton.Text = 'Show FFT';

            % Create ResultsUITable
            app.ResultsUITable = uitable(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.ResultsUITable.ColumnName = {'Exposure Index'; 'Threshold (V/m)'; 'AP Time (ms)'; 'AP Node'};
            app.ResultsUITable.RowName = {'WPM, SENN (Reilly), SENN (Ghent U.)'};
            app.ResultsUITable.Position = [880 364 563 128];

            % Create CalculateRSENNButton
            app.CalculateRSENNButton = uibutton(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'push');
            app.CalculateRSENNButton.ButtonPushedFcn = createCallbackFcn(app, @CalculateRSENNButtonButtonPushed, true);
            app.CalculateRSENNButton.Position = [1085 263 100 22];
            app.CalculateRSENNButton.Text = 'SENN (Reilly)';

            % Create TMinWeightedSignalLabel
            app.TMinWeightedSignalLabel = uilabel(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.TMinWeightedSignalLabel.HorizontalAlignment = 'right';
            app.TMinWeightedSignalLabel.Position = [48 177 129 22];
            app.TMinWeightedSignalLabel.Text = 'T Min Weighted Signal:';

            % Create TMinWPMEditField
            app.TMinWPMEditField = uieditfield(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'numeric');
            app.TMinWPMEditField.ValueChangedFcn = createCallbackFcn(app, @TMinWPMEditFieldValueChanged, true);
            app.TMinWPMEditField.Position = [196 177 83 22];

            % Create TMinElectricFieldLabel
            app.TMinElectricFieldLabel = uilabel(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.TMinElectricFieldLabel.HorizontalAlignment = 'right';
            app.TMinElectricFieldLabel.Position = [1117 573 111 22];
            app.TMinElectricFieldLabel.Text = 'T Min Electric Field:';

            % Create TMinRD_SENNEditField
            app.TMinRD_SENNEditField = uieditfield(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'numeric');
            app.TMinRD_SENNEditField.ValueChangedFcn = createCallbackFcn(app, @TMinRD_SENNEditFieldValueChanged, true);
            app.TMinRD_SENNEditField.Position = [1239 573 75 22];

            % Create Image
            app.Image = uiimage(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.Image.HorizontalAlignment = 'left';
            app.Image.Position = [47 48 304 72];
            app.Image.ImageSource = 'Logo IFA RGB.gif';

            % Create SENNParametersButtonGroup
            app.SENNParametersButtonGroup = uibuttongroup(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.SENNParametersButtonGroup.TitlePosition = 'centertop';
            app.SENNParametersButtonGroup.Title = 'SENN Parameters';
            app.SENNParametersButtonGroup.Position = [881 17 293 221];

            % Create MembraneGhentUButtonGroup
            app.MembraneGhentUButtonGroup = uibuttongroup(app.SENNParametersButtonGroup);
            app.MembraneGhentUButtonGroup.Title = 'Membrane (Ghent U.)';
            app.MembraneGhentUButtonGroup.Position = [11 57 129 136];

            % Create HHButton
            app.HHButton = uitogglebutton(app.MembraneGhentUButtonGroup);
            app.HHButton.Text = 'HH';
            app.HHButton.Position = [18 89 50 22];
            app.HHButton.Value = true;

            % Create FHButton
            app.FHButton = uitogglebutton(app.MembraneGhentUButtonGroup);
            app.FHButton.Text = 'FH';
            app.FHButton.Position = [17 67 51 22];

            % Create CRRSSButton
            app.CRRSSButton = uitogglebutton(app.MembraneGhentUButtonGroup);
            app.CRRSSButton.Text = 'CRRSS';
            app.CRRSSButton.Position = [17 45 52 22];

            % Create SEButton
            app.SEButton = uitogglebutton(app.MembraneGhentUButtonGroup);
            app.SEButton.Text = 'SE';
            app.SEButton.Position = [18 23 50 22];

            % Create SRBButton
            app.SRBButton = uitogglebutton(app.MembraneGhentUButtonGroup);
            app.SRBButton.Text = 'SRB';
            app.SRBButton.Position = [19 2 49 22];

            % Create DmmEditFieldLabel
            app.DmmEditFieldLabel = uilabel(app.SENNParametersButtonGroup);
            app.DmmEditFieldLabel.HorizontalAlignment = 'right';
            app.DmmEditFieldLabel.Position = [141 100 55 22];
            app.DmmEditFieldLabel.Text = 'D (mm)';

            % Create DmmEditField
            app.DmmEditField = uieditfield(app.SENNParametersButtonGroup, 'numeric');
            app.DmmEditField.Position = [211 100 69 20];
            app.DmmEditField.Value = 0.02;

            % Create LmmEditFieldLabel
            app.LmmEditFieldLabel = uilabel(app.SENNParametersButtonGroup);
            app.LmmEditFieldLabel.HorizontalAlignment = 'right';
            app.LmmEditFieldLabel.Position = [140 69 55 22];
            app.LmmEditFieldLabel.Text = 'L (mm)';

            % Create LmmEditField
            app.LmmEditField = uieditfield(app.SENNParametersButtonGroup, 'numeric');
            app.LmmEditField.Position = [210 69 69 20];
            app.LmmEditField.Value = 20.5;

            % Create ReillysValuesButton
            app.ReillysValuesButton = uibutton(app.SENNParametersButtonGroup, 'push');
            app.ReillysValuesButton.ButtonPushedFcn = createCallbackFcn(app, @ReillysValuesButtonPushed, true);
            app.ReillysValuesButton.Position = [100 26 100 22];
            app.ReillysValuesButton.Text = 'Reilly''s Values';

            % Create CalculateGSENNButton
            app.CalculateGSENNButton = uibutton(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'push');
            app.CalculateGSENNButton.ButtonPushedFcn = createCallbackFcn(app, @CalculateGSENNButtonPushed, true);
            app.CalculateGSENNButton.Position = [1192 263 108 22];
            app.CalculateGSENNButton.Text = 'SENN (Ghent U.)';

            % Create ScreenshotButton
            app.ScreenshotButton = uibutton(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'push');
            app.ScreenshotButton.ButtonPushedFcn = createCallbackFcn(app, @ScreenshotButtonPushed, true);
            app.ScreenshotButton.Position = [1392 263 82 22];
            app.ScreenshotButton.Text = 'Screenshot';

            % Create UseWaveformButton
            app.UseWaveformButton = uibutton(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'push');
            app.UseWaveformButton.ButtonPushedFcn = createCallbackFcn(app, @UseWaveformButtonPushed, true);
            app.UseWaveformButton.Position = [987 263 94 22];
            app.UseWaveformButton.Text = 'Use Waveform';

            % Create Image2
            app.Image2 = uiimage(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.Image2.Position = [373 68 119 105];
            app.Image2.ImageSource = 'logo_UGent_EN_RGB_2400_color.png';

            % Create Image3
            app.Image3 = uiimage(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.Image3.Position = [432 83 240 100];
            app.Image3.ImageSource = 'icon_UGent_EA_EN_RGB_2400_color.png';

            % Create Image4
            app.Image4 = uiimage(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.Image4.Position = [395 34 314 84];
            app.Image4.ImageSource = 'waves_v5.svg';

            % Create SolveroptionsGhentUButtonGroup
            app.SolveroptionsGhentUButtonGroup = uibuttongroup(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.SolveroptionsGhentUButtonGroup.TitlePosition = 'centertop';
            app.SolveroptionsGhentUButtonGroup.Title = 'Solver options (Ghent U.)';
            app.SolveroptionsGhentUButtonGroup.Position = [1193 17 190 221];

            % Create MaxstepusEditFieldLabel
            app.MaxstepusEditFieldLabel = uilabel(app.SolveroptionsGhentUButtonGroup);
            app.MaxstepusEditFieldLabel.HorizontalAlignment = 'right';
            app.MaxstepusEditFieldLabel.Position = [14 171 82 22];
            app.MaxstepusEditFieldLabel.Text = 'Max. step (us)';

            % Create MaxstepusEditField
            app.MaxstepusEditField = uieditfield(app.SolveroptionsGhentUButtonGroup, 'numeric');
            app.MaxstepusEditField.Position = [111 171 69 20];
            app.MaxstepusEditField.Value = 25;

            % Create SamplingperiodEditFieldLabel
            app.SamplingperiodEditFieldLabel = uilabel(app.SolveroptionsGhentUButtonGroup);
            app.SamplingperiodEditFieldLabel.HorizontalAlignment = 'right';
            app.SamplingperiodEditFieldLabel.Position = [4 140 92 22];
            app.SamplingperiodEditFieldLabel.Text = 'Sampling/period';

            % Create SamplingperiodEditField
            app.SamplingperiodEditField = uieditfield(app.SolveroptionsGhentUButtonGroup, 'numeric');
            app.SamplingperiodEditField.Position = [111 140 69 20];
            app.SamplingperiodEditField.Value = 40;

            % Create OrderofsolutionEditFieldLabel
            app.OrderofsolutionEditFieldLabel = uilabel(app.SolveroptionsGhentUButtonGroup);
            app.OrderofsolutionEditFieldLabel.HorizontalAlignment = 'right';
            app.OrderofsolutionEditFieldLabel.Position = [2 109 94 22];
            app.OrderofsolutionEditFieldLabel.Text = 'Order of solution';

            % Create OrderofsolutionEditField
            app.OrderofsolutionEditField = uieditfield(app.SolveroptionsGhentUButtonGroup, 'numeric');
            app.OrderofsolutionEditField.Position = [111 109 69 20];
            app.OrderofsolutionEditField.Value = 1;

            % Create EappVmEditFieldLabel
            app.EappVmEditFieldLabel = uilabel(app.SolveroptionsGhentUButtonGroup);
            app.EappVmEditFieldLabel.HorizontalAlignment = 'right';
            app.EappVmEditFieldLabel.Position = [19 23 66 22];
            app.EappVmEditFieldLabel.Text = 'Eapp (V/m)';

            % Create EappVmEditField
            app.EappVmEditField = uieditfield(app.SolveroptionsGhentUButtonGroup, 'numeric');
            app.EappVmEditField.Position = [92 23 69 20];

            % Create LowerlimitVmEditFieldLabel
            app.LowerlimitVmEditFieldLabel = uilabel(app.SolveroptionsGhentUButtonGroup);
            app.LowerlimitVmEditFieldLabel.HorizontalAlignment = 'right';
            app.LowerlimitVmEditFieldLabel.Position = [2 80 95 22];
            app.LowerlimitVmEditFieldLabel.Text = 'Lower limit (V/m)';

            % Create LowerlimitVmEditField
            app.LowerlimitVmEditField = uieditfield(app.SolveroptionsGhentUButtonGroup, 'numeric');
            app.LowerlimitVmEditField.Position = [110 80 69 20];

            % Create UpperlimitVmEditFieldLabel
            app.UpperlimitVmEditFieldLabel = uilabel(app.SolveroptionsGhentUButtonGroup);
            app.UpperlimitVmEditFieldLabel.HorizontalAlignment = 'right';
            app.UpperlimitVmEditFieldLabel.Position = [1 51 95 22];
            app.UpperlimitVmEditFieldLabel.Text = 'Upper limit (V/m)';

            % Create UpperlimitVmEditField
            app.UpperlimitVmEditField = uieditfield(app.SolveroptionsGhentUButtonGroup, 'numeric');
            app.UpperlimitVmEditField.Position = [109 51 69 20];

            % Create PredefinedWaveformPanel
            app.PredefinedWaveformPanel = uipanel(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);
            app.PredefinedWaveformPanel.Title = 'Predefined Waveform';
            app.PredefinedWaveformPanel.Position = [1399 17 180 221];

            % Create TypeButtonGroup
            app.TypeButtonGroup = uibuttongroup(app.PredefinedWaveformPanel);
            app.TypeButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @TypeButtonGroupSelectionChanged, true);
            app.TypeButtonGroup.Title = 'Type';
            app.TypeButtonGroup.Position = [8 119 123 78];

            % Create SineButton
            app.SineButton = uitogglebutton(app.TypeButtonGroup);
            app.SineButton.Text = 'Sine';
            app.SineButton.Position = [11 29 100 22];
            app.SineButton.Value = true;

            % Create PulseButton
            app.PulseButton = uitogglebutton(app.TypeButtonGroup);
            app.PulseButton.Text = 'Pulse';
            app.PulseButton.Position = [11 8 100 22];

            % Create FrequencyHzEditFieldLabel
            app.FrequencyHzEditFieldLabel = uilabel(app.PredefinedWaveformPanel);
            app.FrequencyHzEditFieldLabel.HorizontalAlignment = 'right';
            app.FrequencyHzEditFieldLabel.Position = [6 86 94 22];
            app.FrequencyHzEditFieldLabel.Text = 'Frequency (Hz):';

            % Create FrequencyHzEditField
            app.FrequencyHzEditField = uieditfield(app.PredefinedWaveformPanel, 'numeric');
            app.FrequencyHzEditField.Limits = [0 Inf];
            app.FrequencyHzEditField.ValueChangedFcn = createCallbackFcn(app, @FrequencyHzEditFieldValueChanged, true);
            app.FrequencyHzEditField.Position = [117 86 53 22];
            app.FrequencyHzEditField.Value = 50;

            % Create AmplitudeVmEditField_2Label
            app.AmplitudeVmEditField_2Label = uilabel(app.PredefinedWaveformPanel);
            app.AmplitudeVmEditField_2Label.HorizontalAlignment = 'right';
            app.AmplitudeVmEditField_2Label.Position = [6 34 94 22];
            app.AmplitudeVmEditField_2Label.Text = 'Amplitude (V/m):';

            % Create AmplitudeVmEditField
            app.AmplitudeVmEditField = uieditfield(app.PredefinedWaveformPanel, 'numeric');
            app.AmplitudeVmEditField.ValueChangedFcn = createCallbackFcn(app, @AmplitudeVmEditFieldValueChanged, true);
            app.AmplitudeVmEditField.Position = [117 34 53 22];
            app.AmplitudeVmEditField.Value = 1;

            % Create DurationmsEditFieldLabel
            app.DurationmsEditFieldLabel = uilabel(app.PredefinedWaveformPanel);
            app.DurationmsEditFieldLabel.HorizontalAlignment = 'right';
            app.DurationmsEditFieldLabel.Position = [6 5 94 22];
            app.DurationmsEditFieldLabel.Text = 'Duration (ms):';

            % Create DurationmsEditField
            app.DurationmsEditField = uieditfield(app.PredefinedWaveformPanel, 'numeric');
            app.DurationmsEditField.Limits = [0 Inf];
            app.DurationmsEditField.ValueChangedFcn = createCallbackFcn(app, @DurationmsEditFieldValueChanged, true);
            app.DurationmsEditField.Position = [117 5 53 22];
            app.DurationmsEditField.Value = 100;

            % Create PhaseEditFieldLabel
            app.PhaseEditFieldLabel = uilabel(app.PredefinedWaveformPanel);
            app.PhaseEditFieldLabel.HorizontalAlignment = 'right';
            app.PhaseEditFieldLabel.Position = [6 60 94 22];
            app.PhaseEditFieldLabel.Text = 'Phase (°):';

            % Create PhaseEditField
            app.PhaseEditField = uieditfield(app.PredefinedWaveformPanel, 'numeric');
            app.PhaseEditField.Limits = [0 360];
            app.PhaseEditField.ValueChangedFcn = createCallbackFcn(app, @PhaseEditFieldValueChanged, true);
            app.PhaseEditField.Position = [117 60 53 22];

            % Create RunBatchButton
            app.RunBatchButton = uibutton(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure, 'push');
            app.RunBatchButton.ButtonPushedFcn = createCallbackFcn(app, @RunBatchButtonPushed, true);
            app.RunBatchButton.Position = [1305 263 79 22];
            app.RunBatchButton.Text = 'Run Batch';

            % Create ContextMenu
            app.ContextMenu = uicontextmenu(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure);

            % Create Menu
            app.Menu = uimenu(app.ContextMenu);
            app.Menu.Text = 'Menu';

            % Create Menu2
            app.Menu2 = uimenu(app.ContextMenu);
            app.Menu2.Text = 'Menu2';
            
            % Assign app.ContextMenu
            app.MembraneGhentUButtonGroup.ContextMenu = app.ContextMenu;

            % Show the figure after all components are created
            app.EvaluationofNonSinusoidalMagneticFieldsUIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = EONS

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.EvaluationofNonSinusoidalMagneticFieldsUIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.EvaluationofNonSinusoidalMagneticFieldsUIFigure)
        end
    end
end]]></w:t></w:r></w:p></w:body></w:document>